
O primeiro RGB está em D5, D6, D7
Inseri mais um RGB na Porta A1, A2, A3 - Vermelho, Azul e Verde (Esse é o segundo RGB)

O primeiro RGB eu vou usar para a temperatura dessa forma:
Se a temperatura estiver maior que 50 graus  -  eu quero três bipes e o led vermelho continuamente
Se a temperatura estiver entre 20 e 30 graus - eu quero apenas o led verde continuamente e um bip curto a cada 20 segundos
Se a temperatura estiver menor que 0 graus -  eu quero 2 bipes e o led azul continuamente

O segundo RGB eu vou usar para a distancia dessa forma:
Se a distancia estiver maior que 100 cm - led vermelho continuamente
Se a distancia estiver entre 25 e 50 cm - led verde continuamente
Se a distancia estiver menor 10 cm - led azul continuamente

Current through I/O pin(s)
D7 (83.3mA) exceeds the absolute maximum of 40.0 mA. This may permanently damage the Arduino


#include <LiquidCrystal.h>
#include <LiquidCrystal_I2C.h>
#include <Wire.h>

LiquidCrystal_I2C lcd(0x20, 16, 2);

// Configuração dos pinos
const int TMP36_PIN = A0;
const int TRIG_PIN = 9;
const int ECHO_PIN = 10;
const int BUTTON_PIN = 7;    // Botão com resistor externo
const int RED_PIN = 3;
const int GREEN_PIN = 5;
const int BLUE_PIN = 6;

// Variáveis de estado
enum Mode { NORMAL, ADJUST_TEMP, ADJUST_DIST };
Mode currentMode = NORMAL;

// Limites
float tempLimit = 30.0;
int distLimit = 20;

// Controle do botão
unsigned long lastButtonPress = 0;
const int debounceDelay = 200;  // Debounce de 200ms

void setup() {
  Serial.begin(9600);
  
  // Configuração IMPORTANTE para resistor externo
  pinMode(BUTTON_PIN, INPUT);  // SEM PULLUP INTERNO
  
  pinMode(RED_PIN, OUTPUT);
  pinMode(GREEN_PIN, OUTPUT);
  pinMode(BLUE_PIN, OUTPUT);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  lcd.init();
  lcd.backlight();
  
  // Teste inicial
  lcd.setCursor(0, 0);
  lcd.print("Teste do Botao");
  lcd.setCursor(0, 1);
  lcd.print("Pressione...");
  
  // Aguarda pressionamento inicial para teste
  while(digitalRead(BUTTON_PIN) == HIGH) { // Aguarda botão pressionado
    delay(50);
  }
  lcd.clear();
  lcd.print("Botao OK!");
  delay(1000);
  lcd.clear();
}

void loop() {
  // Verificação do botão com resistor externo
  if(digitalRead(BUTTON_PIN) == LOW && (millis() - lastButtonPress) > debounceDelay) {
    lastButtonPress = millis();
    
    // Alterna entre modos
    currentMode = (Mode)((currentMode + 1) % 3);
    lcd.clear();
    
    // Feedback visual
    digitalWrite(BLUE_PIN, HIGH);
    delay(100);
    digitalWrite(BLUE_PIN, LOW);
    
    Serial.print("Modo alterado: ");
    Serial.println(currentMode);
  }

  // Leitura dos sensores
  float temperature = readTemperature();
  int distance = readDistance();

  // Atualização do display e LEDs
  switch(currentMode) {
    case NORMAL:
      lcd.setCursor(0, 0);
      lcd.print("Temp: ");
      lcd.print(temperature, 1);
      lcd.print("C ");
      
      lcd.setCursor(0, 1);
      lcd.print("Dist: ");
      lcd.print(distance);
      lcd.print("cm ");
      
      // Controle dos LEDs
      digitalWrite(GREEN_PIN, temperature <= tempLimit && distance >= distLimit);
      digitalWrite(RED_PIN, temperature > tempLimit);
      digitalWrite(BLUE_PIN, distance < distLimit);
      break;
      
    case ADJUST_TEMP:
      // Ajuste de temperatura com sensor ultrassônico
      tempLimit = map(constrain(distance, 5, 50), 5, 50, 10, 50);
      
      lcd.setCursor(0, 0);
      lcd.print("Ajuste Temp");
      lcd.setCursor(0, 1);
      lcd.print("Lim: ");
      lcd.print(tempLimit, 1);
      lcd.print("C     ");
      
      // LED vermelho piscando
      digitalWrite(RED_PIN, (millis()/500) % 2);
      digitalWrite(GREEN_PIN, LOW);
      digitalWrite(BLUE_PIN, LOW);
      break;
      
    case ADJUST_DIST:
      // Ajuste de distância com sensor ultrassônico
      distLimit = map(constrain(distance, 5, 50), 5, 50, 5, 50);
      
      lcd.setCursor(0, 0);
      lcd.print("Ajuste Dist");
      lcd.setCursor(0, 1);
      lcd.print("Lim: ");
      lcd.print(distLimit);
      lcd.print("cm    ");
      
      // LED azul piscando
      digitalWrite(BLUE_PIN, (millis()/500) % 2);
      digitalWrite(RED_PIN, LOW);
      digitalWrite(GREEN_PIN, LOW);
      break;
  }

  delay(100);
}

float readTemperature() {
  int reading = analogRead(TMP36_PIN);
  float voltage = reading * (5.0 / 1023.0);
  return (voltage - 0.5) * 100.0;
}

int readDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH);
  return duration * 0.034 


